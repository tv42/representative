// Code generated by github.com/tv42/becky -- DO NOT EDIT.

package static

var _ = addAsset(asset{Name: "notes.js", Content: "" +
	"// Copyright 2016 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Store child window object which will display slides with notes\nvar notesWindow = null;\n\nvar isParentWindow = window.parent == window;\n\n// When parent window closes, clear storage and close child window\nif (isParentWindow) {\n  window.onbeforeunload = function() {\n    localStorage.clear();\n    if (notesWindow) notesWindow.close();\n  }\n};\n\nfunction toggleNotesWindow() {\n  if (!isParentWindow) return;\n  if (notesWindow) {\n    notesWindow.close();\n    notesWindow = null;\n    return;\n  }\n\n  initNotes();\n};\n\n// Create an unique key for the local storage so we don't mix the\n// destSlide of different presentations. For golang.org/issue/24688.\nfunction destSlideKey() {\n  var key = '';\n  if (notesWindow) {\n    var slides = notesWindow.document.getElementById('presenter-slides');\n    key = slides.src.split('#')[0];\n  } else {\n    key = window.location.href.split('#')[0];\n  }\n  return 'destSlide:' + key;\n}\n\nfunction initNotes() {\n  notesWindow = window.open('', '', 'width=1000,height=700');\n  var w = notesWindow;\n  var slidesUrl = window.location.href;\n\n  // Hack to apply css. Requires existing html on notesWindow.\n  w.document.write(\"<div style='display:none;'></div>\");\n\n  w.document.title = window.document.title;\n\n  var slides = w.document.createElement('iframe');\n  slides.id = 'presenter-slides';\n  slides.src = slidesUrl;\n  w.document.body.appendChild(slides);\n\n  var curSlide = parseInt(localStorage.getItem(destSlideKey()), 10);\n  var formattedNotes = '';\n  var section = sections[curSlide - 1];\n  // curSlide is 0 when initialized from the first page of slides.\n  // Check if section is valid before retrieving Notes.\n  if (section) {\n    formattedNotes = formatNotes(section.Notes);\n  } else if (curSlide == 0) {\n    formattedNotes = formatNotes(titleNotes);\n  }\n\n  // setTimeout needed for Firefox\n  setTimeout(function() {\n    slides.focus();\n  }, 100);\n\n  var notes = w.document.createElement('div');\n  notes.id = 'presenter-notes';\n  notes.innerHTML = formattedNotes;\n  w.document.body.appendChild(notes);\n\n  w.document.close();\n\n  function addPresenterNotesStyle() {\n    var el = w.document.createElement('link');\n    el.rel = 'stylesheet';\n    el.type = 'text/css';\n    el.href = PERMANENT_URL_PREFIX + 'notes.css';\n    w.document.body.appendChild(el);\n    w.document.querySelector('head').appendChild(el);\n  }\n\n  addPresenterNotesStyle();\n\n  // Add listener on notesWindow to update notes when triggered from\n  // parent window\n  w.addEventListener('storage', updateNotes, false);\n};\n\nfunction formatNotes(notes) {\n  var formattedNotes = '';\n  if (notes) {\n    for (var i = 0; i < notes.length; i++) {\n      formattedNotes = formattedNotes + '<p>' + notes[i] + '</p>';\n    }\n  }\n  return formattedNotes;\n};\n\nfunction updateNotes() {\n  // When triggered from parent window, notesWindow is null\n  // The storage event listener on notesWindow will update notes\n  if (!notesWindow) return;\n  var destSlide = parseInt(localStorage.getItem(destSlideKey()), 10);\n  var section = sections[destSlide - 1];\n  var el = notesWindow.document.getElementById('presenter-notes');\n\n  if (!el) return;\n\n  if (section && section.Notes) {\n    el.innerHTML = formatNotes(section.Notes);\n  } else if (destSlide == 0) {\n    el.innerHTML = formatNotes(titleNotes);\n  } else {\n    el.innerHTML = '';\n  }\n};\n\n/* Playground syncing */\n\n// When presenter notes are enabled, playground click handlers are\n// stored here to sync click events on the correct playground\nvar playgroundHandlers = {onRun: [], onKill: [], onClose: []};\n\nfunction updatePlay(e) {\n  var i = localStorage.getItem('play-index');\n\n  switch (e.key) {\n    case 'play-index':\n      return;\n    case 'play-action':\n      // Sync 'run', 'kill', 'close' actions\n      var action = localStorage.getItem('play-action');\n      playgroundHandlers[action][i](e);\n      return;\n    case 'play-code':\n      // Sync code editing\n      var play = document.querySelectorAll('div.playground')[i];\n      play.innerHTML = localStorage.getItem('play-code');\n      return;\n    case 'output-style':\n      // Sync resizing of playground output\n      var out = document.querySelectorAll('.output')[i];\n      out.style = localStorage.getItem('output-style');\n      return;\n  }\n};\n\n// Reset 'run', 'kill', 'close' storage items when synced\n// so that successive actions can be synced correctly\nfunction updatePlayStorage(action, index, e) {\n  localStorage.setItem('play-index', index);\n\n  if (localStorage.getItem('play-action') === action) {\n    // We're the receiving window, and the message has been received\n    localStorage.removeItem('play-action');\n  } else {\n    // We're the triggering window, send the message\n    localStorage.setItem('play-action', action);\n  }\n\n  if (action === 'onRun') {\n    if (localStorage.getItem('play-shiftKey') === 'true') {\n      localStorage.removeItem('play-shiftKey');\n    } else if (e.shiftKey) {\n      localStorage.setItem('play-shiftKey', e.shiftKey);\n    }\n  }\n};\n" +
	"", etag: `"mZBOiA45HF4="`})
